const express = require('express')
const app = express()
const fs = require('fs')
const bodyParser = require('body-parser')
const uuidv1 = require('uuid/v1')

app.use(bodyParser.json())

let books = require('../books.json')

app.get('/books', function(req, res){  
  res.json(books)
})

app.post('/books', function(req, res) {   
  
  if (!req.body) return res.sendStatus(500)
  let newBook = {}
  console.log(newBook)
  try {
    newBook = JSON.parse(req.body)
  } catch (e) {
    return res.sendStatus(500)
  }
  
  newBook.id = uuidv1()
  if (books.find(item=>item.id == newBook.id)) return res.sendStatus(400)
  books.push(newBook)
  
  return res.status(201).json(newBook)
})

app.put('/books/:id', function(req, res){
  let id = req.params.id
  let index = books.findIndex(item=>item.id == id)
  if (!books[index] || !req.body) return res.sendStatus(400)
  books[index] = req.body
  res.status(200).json(books[id])
})

app.delete('/books/:id', function(req, res){
  let id = req.params.id
  let index = books.findIndex(item=>item.id == id)
  if (!books[index]) return res.sendStatus(400)
  books.splice[index, 1]
  res.sendStatus(204)
})

app.listen(process.argv[2], ()=>{
  const superagent = require('superagent')
  const expect = require('expect.js')
  const async = require('async')
  const url = `http://localhost:${process.argv[2]}`

  async.series(
    [
    function(done){ // posts an object
      superagent.post(`${url}/books`)
        .send({ name: 'John'
          , email: 'john@rpjs.co'
        })
        .end(function(e, res){
          console.log(res.body)
          expect(e).to.eql(null)
          expect(res.body.length).to.eql(1)
          expect(res.body[0]._id.length).to.eql(24)
          id = res.body[0]._id
          done()
        })
    },

    function(done){ // retrieves an object
      superagent.get(`${url}/books/${id}`)
        .end(function(e, res){
          // console.log(res.body)
          expect(e).to.eql(null)
          expect(typeof res.body).to.eql('object')
          expect(res.body._id.length).to.eql(24)
          expect(res.body._id).to.eql(id)
          expect(res.body.name).to.eql('John')
          done()
        })
    },

    function(done){ // retrieves a collection
      superagent.get(`${url}/books`)
        .end(function(e, res){
          // console.log(res.body)
          expect(e).to.eql(null)
          expect(res.body.length).to.be.above(0)
          expect(res.body.map(function (item){return item._id})).to.contain(id)
          done()
        })
    },

    function(done){ // updates an object
      superagent.put(`${url}/books/${id}`)
        .send({name: 'Peter'
          , email: 'peter@yahoo.com'})
        .end(function(e, res){
          // console.log(res.body)
          expect(e).to.eql(null)
          expect(typeof res.body).to.eql('object')
          expect(res.body.msg).to.eql('success')
          done()
        })
    },

    function(done){ // checks an updated object
      superagent.get(`${url}/books/${id}`)
        .end(function(e, res){
          // console.log(res.body)
          expect(e).to.eql(null)
          expect(typeof res.body).to.eql('object')
          expect(res.body._id.length).to.eql(24)
          expect(res.body._id).to.eql(id)
          expect(res.body.name).to.eql('Peter')
          done()
        })
    },
    function(done){ // removes an object
      superagent.del(`${url}/books/${id}`)
        .end(function(e, res){
          // console.log(res.body)
          expect(e).to.eql(null)
          expect(typeof res.body).to.eql('object')
          expect(res.body.msg).to.eql('success')
          done()
        })
    },
    function(done){ // checks an removed object
      superagent.get(`${url}/books/`)
        .end(function(e, res){
          // console.log(res.body)
          expect(e).to.eql(null)
          expect(res.body.map(function (item){return item._id})).to.not.be(id)
          done()
        })
    }

  ])
})
